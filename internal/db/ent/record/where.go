// Code generated by ent, DO NOT EDIT.

package record

import (
	"hyuga/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// RemoteAddr applies equality check predicate on the "remote_addr" field. It's identical to RemoteAddrEQ.
func RemoteAddr(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemoteAddr), v))
	})
}

// DNSName applies equality check predicate on the "dns_name" field. It's identical to DNSNameEQ.
func DNSName(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDNSName), v))
	})
}

// HTTPURL applies equality check predicate on the "http_url" field. It's identical to HTTPURLEQ.
func HTTPURL(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPURL), v))
	})
}

// HTTPMethod applies equality check predicate on the "http_method" field. It's identical to HTTPMethodEQ.
func HTTPMethod(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPMethod), v))
	})
}

// HTTPRaw applies equality check predicate on the "http_raw" field. It's identical to HTTPRawEQ.
func HTTPRaw(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPRaw), v))
	})
}

// JndiProtocol applies equality check predicate on the "jndi_protocol" field. It's identical to JndiProtocolEQ.
func JndiProtocol(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJndiProtocol), v))
	})
}

// JndiPath applies equality check predicate on the "jndi_path" field. It's identical to JndiPathEQ.
func JndiPath(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJndiPath), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// RemoteAddrEQ applies the EQ predicate on the "remote_addr" field.
func RemoteAddrEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrNEQ applies the NEQ predicate on the "remote_addr" field.
func RemoteAddrNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrIn applies the In predicate on the "remote_addr" field.
func RemoteAddrIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemoteAddr), v...))
	})
}

// RemoteAddrNotIn applies the NotIn predicate on the "remote_addr" field.
func RemoteAddrNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemoteAddr), v...))
	})
}

// RemoteAddrGT applies the GT predicate on the "remote_addr" field.
func RemoteAddrGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrGTE applies the GTE predicate on the "remote_addr" field.
func RemoteAddrGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrLT applies the LT predicate on the "remote_addr" field.
func RemoteAddrLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrLTE applies the LTE predicate on the "remote_addr" field.
func RemoteAddrLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrContains applies the Contains predicate on the "remote_addr" field.
func RemoteAddrContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrHasPrefix applies the HasPrefix predicate on the "remote_addr" field.
func RemoteAddrHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrHasSuffix applies the HasSuffix predicate on the "remote_addr" field.
func RemoteAddrHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrEqualFold applies the EqualFold predicate on the "remote_addr" field.
func RemoteAddrEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemoteAddr), v))
	})
}

// RemoteAddrContainsFold applies the ContainsFold predicate on the "remote_addr" field.
func RemoteAddrContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemoteAddr), v))
	})
}

// DNSNameEQ applies the EQ predicate on the "dns_name" field.
func DNSNameEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDNSName), v))
	})
}

// DNSNameNEQ applies the NEQ predicate on the "dns_name" field.
func DNSNameNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDNSName), v))
	})
}

// DNSNameIn applies the In predicate on the "dns_name" field.
func DNSNameIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDNSName), v...))
	})
}

// DNSNameNotIn applies the NotIn predicate on the "dns_name" field.
func DNSNameNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDNSName), v...))
	})
}

// DNSNameGT applies the GT predicate on the "dns_name" field.
func DNSNameGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDNSName), v))
	})
}

// DNSNameGTE applies the GTE predicate on the "dns_name" field.
func DNSNameGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDNSName), v))
	})
}

// DNSNameLT applies the LT predicate on the "dns_name" field.
func DNSNameLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDNSName), v))
	})
}

// DNSNameLTE applies the LTE predicate on the "dns_name" field.
func DNSNameLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDNSName), v))
	})
}

// DNSNameContains applies the Contains predicate on the "dns_name" field.
func DNSNameContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDNSName), v))
	})
}

// DNSNameHasPrefix applies the HasPrefix predicate on the "dns_name" field.
func DNSNameHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDNSName), v))
	})
}

// DNSNameHasSuffix applies the HasSuffix predicate on the "dns_name" field.
func DNSNameHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDNSName), v))
	})
}

// DNSNameEqualFold applies the EqualFold predicate on the "dns_name" field.
func DNSNameEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDNSName), v))
	})
}

// DNSNameContainsFold applies the ContainsFold predicate on the "dns_name" field.
func DNSNameContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDNSName), v))
	})
}

// HTTPURLEQ applies the EQ predicate on the "http_url" field.
func HTTPURLEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLNEQ applies the NEQ predicate on the "http_url" field.
func HTTPURLNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLIn applies the In predicate on the "http_url" field.
func HTTPURLIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHTTPURL), v...))
	})
}

// HTTPURLNotIn applies the NotIn predicate on the "http_url" field.
func HTTPURLNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHTTPURL), v...))
	})
}

// HTTPURLGT applies the GT predicate on the "http_url" field.
func HTTPURLGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLGTE applies the GTE predicate on the "http_url" field.
func HTTPURLGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLLT applies the LT predicate on the "http_url" field.
func HTTPURLLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLLTE applies the LTE predicate on the "http_url" field.
func HTTPURLLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLContains applies the Contains predicate on the "http_url" field.
func HTTPURLContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLHasPrefix applies the HasPrefix predicate on the "http_url" field.
func HTTPURLHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLHasSuffix applies the HasSuffix predicate on the "http_url" field.
func HTTPURLHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLEqualFold applies the EqualFold predicate on the "http_url" field.
func HTTPURLEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHTTPURL), v))
	})
}

// HTTPURLContainsFold applies the ContainsFold predicate on the "http_url" field.
func HTTPURLContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHTTPURL), v))
	})
}

// HTTPMethodEQ applies the EQ predicate on the "http_method" field.
func HTTPMethodEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodNEQ applies the NEQ predicate on the "http_method" field.
func HTTPMethodNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodIn applies the In predicate on the "http_method" field.
func HTTPMethodIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHTTPMethod), v...))
	})
}

// HTTPMethodNotIn applies the NotIn predicate on the "http_method" field.
func HTTPMethodNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHTTPMethod), v...))
	})
}

// HTTPMethodGT applies the GT predicate on the "http_method" field.
func HTTPMethodGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodGTE applies the GTE predicate on the "http_method" field.
func HTTPMethodGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodLT applies the LT predicate on the "http_method" field.
func HTTPMethodLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodLTE applies the LTE predicate on the "http_method" field.
func HTTPMethodLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodContains applies the Contains predicate on the "http_method" field.
func HTTPMethodContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodHasPrefix applies the HasPrefix predicate on the "http_method" field.
func HTTPMethodHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodHasSuffix applies the HasSuffix predicate on the "http_method" field.
func HTTPMethodHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodEqualFold applies the EqualFold predicate on the "http_method" field.
func HTTPMethodEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHTTPMethod), v))
	})
}

// HTTPMethodContainsFold applies the ContainsFold predicate on the "http_method" field.
func HTTPMethodContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHTTPMethod), v))
	})
}

// HTTPRawEQ applies the EQ predicate on the "http_raw" field.
func HTTPRawEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawNEQ applies the NEQ predicate on the "http_raw" field.
func HTTPRawNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawIn applies the In predicate on the "http_raw" field.
func HTTPRawIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHTTPRaw), v...))
	})
}

// HTTPRawNotIn applies the NotIn predicate on the "http_raw" field.
func HTTPRawNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHTTPRaw), v...))
	})
}

// HTTPRawGT applies the GT predicate on the "http_raw" field.
func HTTPRawGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawGTE applies the GTE predicate on the "http_raw" field.
func HTTPRawGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawLT applies the LT predicate on the "http_raw" field.
func HTTPRawLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawLTE applies the LTE predicate on the "http_raw" field.
func HTTPRawLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawContains applies the Contains predicate on the "http_raw" field.
func HTTPRawContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawHasPrefix applies the HasPrefix predicate on the "http_raw" field.
func HTTPRawHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawHasSuffix applies the HasSuffix predicate on the "http_raw" field.
func HTTPRawHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawEqualFold applies the EqualFold predicate on the "http_raw" field.
func HTTPRawEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHTTPRaw), v))
	})
}

// HTTPRawContainsFold applies the ContainsFold predicate on the "http_raw" field.
func HTTPRawContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHTTPRaw), v))
	})
}

// JndiProtocolEQ applies the EQ predicate on the "jndi_protocol" field.
func JndiProtocolEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolNEQ applies the NEQ predicate on the "jndi_protocol" field.
func JndiProtocolNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolIn applies the In predicate on the "jndi_protocol" field.
func JndiProtocolIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJndiProtocol), v...))
	})
}

// JndiProtocolNotIn applies the NotIn predicate on the "jndi_protocol" field.
func JndiProtocolNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJndiProtocol), v...))
	})
}

// JndiProtocolGT applies the GT predicate on the "jndi_protocol" field.
func JndiProtocolGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolGTE applies the GTE predicate on the "jndi_protocol" field.
func JndiProtocolGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolLT applies the LT predicate on the "jndi_protocol" field.
func JndiProtocolLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolLTE applies the LTE predicate on the "jndi_protocol" field.
func JndiProtocolLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolContains applies the Contains predicate on the "jndi_protocol" field.
func JndiProtocolContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolHasPrefix applies the HasPrefix predicate on the "jndi_protocol" field.
func JndiProtocolHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolHasSuffix applies the HasSuffix predicate on the "jndi_protocol" field.
func JndiProtocolHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolEqualFold applies the EqualFold predicate on the "jndi_protocol" field.
func JndiProtocolEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJndiProtocol), v))
	})
}

// JndiProtocolContainsFold applies the ContainsFold predicate on the "jndi_protocol" field.
func JndiProtocolContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJndiProtocol), v))
	})
}

// JndiPathEQ applies the EQ predicate on the "jndi_path" field.
func JndiPathEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJndiPath), v))
	})
}

// JndiPathNEQ applies the NEQ predicate on the "jndi_path" field.
func JndiPathNEQ(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJndiPath), v))
	})
}

// JndiPathIn applies the In predicate on the "jndi_path" field.
func JndiPathIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJndiPath), v...))
	})
}

// JndiPathNotIn applies the NotIn predicate on the "jndi_path" field.
func JndiPathNotIn(vs ...string) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJndiPath), v...))
	})
}

// JndiPathGT applies the GT predicate on the "jndi_path" field.
func JndiPathGT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJndiPath), v))
	})
}

// JndiPathGTE applies the GTE predicate on the "jndi_path" field.
func JndiPathGTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJndiPath), v))
	})
}

// JndiPathLT applies the LT predicate on the "jndi_path" field.
func JndiPathLT(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJndiPath), v))
	})
}

// JndiPathLTE applies the LTE predicate on the "jndi_path" field.
func JndiPathLTE(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJndiPath), v))
	})
}

// JndiPathContains applies the Contains predicate on the "jndi_path" field.
func JndiPathContains(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJndiPath), v))
	})
}

// JndiPathHasPrefix applies the HasPrefix predicate on the "jndi_path" field.
func JndiPathHasPrefix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJndiPath), v))
	})
}

// JndiPathHasSuffix applies the HasSuffix predicate on the "jndi_path" field.
func JndiPathHasSuffix(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJndiPath), v))
	})
}

// JndiPathEqualFold applies the EqualFold predicate on the "jndi_path" field.
func JndiPathEqualFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJndiPath), v))
	})
}

// JndiPathContainsFold applies the ContainsFold predicate on the "jndi_path" field.
func JndiPathContainsFold(v string) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJndiPath), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Record {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		p(s.Not())
	})
}
