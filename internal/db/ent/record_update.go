// Code generated by ent, DO NOT EDIT.

package ent

import (
	"hyuga/internal/db/ent/predicate"
	"hyuga/internal/db/ent/record"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecordUpdate is the builder for updating Record entities.
type RecordUpdate struct {
	config
	hooks    []Hook
	mutation *RecordMutation
}

// Where appends a list predicates to the RecordUpdate builder.
func (ru *RecordUpdate) Where(ps ...predicate.Record) *RecordUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUID sets the "uid" field.
func (ru *RecordUpdate) SetUID(i int) *RecordUpdate {
	ru.mutation.ResetUID()
	ru.mutation.SetUID(i)
	return ru
}

// AddUID adds i to the "uid" field.
func (ru *RecordUpdate) AddUID(i int) *RecordUpdate {
	ru.mutation.AddUID(i)
	return ru
}

// SetType sets the "type" field.
func (ru *RecordUpdate) SetType(s string) *RecordUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetRemoteAddr sets the "remote_addr" field.
func (ru *RecordUpdate) SetRemoteAddr(s string) *RecordUpdate {
	ru.mutation.SetRemoteAddr(s)
	return ru
}

// SetDNSName sets the "dns_name" field.
func (ru *RecordUpdate) SetDNSName(s string) *RecordUpdate {
	ru.mutation.SetDNSName(s)
	return ru
}

// SetNillableDNSName sets the "dns_name" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableDNSName(s *string) *RecordUpdate {
	if s != nil {
		ru.SetDNSName(*s)
	}
	return ru
}

// SetHTTPURL sets the "http_url" field.
func (ru *RecordUpdate) SetHTTPURL(s string) *RecordUpdate {
	ru.mutation.SetHTTPURL(s)
	return ru
}

// SetNillableHTTPURL sets the "http_url" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableHTTPURL(s *string) *RecordUpdate {
	if s != nil {
		ru.SetHTTPURL(*s)
	}
	return ru
}

// SetHTTPMethod sets the "http_method" field.
func (ru *RecordUpdate) SetHTTPMethod(s string) *RecordUpdate {
	ru.mutation.SetHTTPMethod(s)
	return ru
}

// SetNillableHTTPMethod sets the "http_method" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableHTTPMethod(s *string) *RecordUpdate {
	if s != nil {
		ru.SetHTTPMethod(*s)
	}
	return ru
}

// SetHTTPRaw sets the "http_raw" field.
func (ru *RecordUpdate) SetHTTPRaw(s string) *RecordUpdate {
	ru.mutation.SetHTTPRaw(s)
	return ru
}

// SetNillableHTTPRaw sets the "http_raw" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableHTTPRaw(s *string) *RecordUpdate {
	if s != nil {
		ru.SetHTTPRaw(*s)
	}
	return ru
}

// SetJndiProtocol sets the "jndi_protocol" field.
func (ru *RecordUpdate) SetJndiProtocol(s string) *RecordUpdate {
	ru.mutation.SetJndiProtocol(s)
	return ru
}

// SetNillableJndiProtocol sets the "jndi_protocol" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableJndiProtocol(s *string) *RecordUpdate {
	if s != nil {
		ru.SetJndiProtocol(*s)
	}
	return ru
}

// SetJndiPath sets the "jndi_path" field.
func (ru *RecordUpdate) SetJndiPath(s string) *RecordUpdate {
	ru.mutation.SetJndiPath(s)
	return ru
}

// SetNillableJndiPath sets the "jndi_path" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableJndiPath(s *string) *RecordUpdate {
	if s != nil {
		ru.SetJndiPath(*s)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RecordUpdate) SetCreatedAt(t time.Time) *RecordUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableCreatedAt(t *time.Time) *RecordUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RecordUpdate) SetUpdatedAt(t time.Time) *RecordUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// Mutation returns the RecordMutation object of the builder.
func (ru *RecordUpdate) Mutation() *RecordMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecordUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecordUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecordUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := record.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *RecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   record.Table,
			Columns: record.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: record.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UID(); ok {
		_spec.SetField(record.FieldUID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedUID(); ok {
		_spec.AddField(record.FieldUID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(record.FieldType, field.TypeString, value)
	}
	if value, ok := ru.mutation.RemoteAddr(); ok {
		_spec.SetField(record.FieldRemoteAddr, field.TypeString, value)
	}
	if value, ok := ru.mutation.DNSName(); ok {
		_spec.SetField(record.FieldDNSName, field.TypeString, value)
	}
	if value, ok := ru.mutation.HTTPURL(); ok {
		_spec.SetField(record.FieldHTTPURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.HTTPMethod(); ok {
		_spec.SetField(record.FieldHTTPMethod, field.TypeString, value)
	}
	if value, ok := ru.mutation.HTTPRaw(); ok {
		_spec.SetField(record.FieldHTTPRaw, field.TypeString, value)
	}
	if value, ok := ru.mutation.JndiProtocol(); ok {
		_spec.SetField(record.FieldJndiProtocol, field.TypeString, value)
	}
	if value, ok := ru.mutation.JndiPath(); ok {
		_spec.SetField(record.FieldJndiPath, field.TypeString, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(record.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(record.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RecordUpdateOne is the builder for updating a single Record entity.
type RecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecordMutation
}

// SetUID sets the "uid" field.
func (ruo *RecordUpdateOne) SetUID(i int) *RecordUpdateOne {
	ruo.mutation.ResetUID()
	ruo.mutation.SetUID(i)
	return ruo
}

// AddUID adds i to the "uid" field.
func (ruo *RecordUpdateOne) AddUID(i int) *RecordUpdateOne {
	ruo.mutation.AddUID(i)
	return ruo
}

// SetType sets the "type" field.
func (ruo *RecordUpdateOne) SetType(s string) *RecordUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetRemoteAddr sets the "remote_addr" field.
func (ruo *RecordUpdateOne) SetRemoteAddr(s string) *RecordUpdateOne {
	ruo.mutation.SetRemoteAddr(s)
	return ruo
}

// SetDNSName sets the "dns_name" field.
func (ruo *RecordUpdateOne) SetDNSName(s string) *RecordUpdateOne {
	ruo.mutation.SetDNSName(s)
	return ruo
}

// SetNillableDNSName sets the "dns_name" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableDNSName(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetDNSName(*s)
	}
	return ruo
}

// SetHTTPURL sets the "http_url" field.
func (ruo *RecordUpdateOne) SetHTTPURL(s string) *RecordUpdateOne {
	ruo.mutation.SetHTTPURL(s)
	return ruo
}

// SetNillableHTTPURL sets the "http_url" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableHTTPURL(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetHTTPURL(*s)
	}
	return ruo
}

// SetHTTPMethod sets the "http_method" field.
func (ruo *RecordUpdateOne) SetHTTPMethod(s string) *RecordUpdateOne {
	ruo.mutation.SetHTTPMethod(s)
	return ruo
}

// SetNillableHTTPMethod sets the "http_method" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableHTTPMethod(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetHTTPMethod(*s)
	}
	return ruo
}

// SetHTTPRaw sets the "http_raw" field.
func (ruo *RecordUpdateOne) SetHTTPRaw(s string) *RecordUpdateOne {
	ruo.mutation.SetHTTPRaw(s)
	return ruo
}

// SetNillableHTTPRaw sets the "http_raw" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableHTTPRaw(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetHTTPRaw(*s)
	}
	return ruo
}

// SetJndiProtocol sets the "jndi_protocol" field.
func (ruo *RecordUpdateOne) SetJndiProtocol(s string) *RecordUpdateOne {
	ruo.mutation.SetJndiProtocol(s)
	return ruo
}

// SetNillableJndiProtocol sets the "jndi_protocol" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableJndiProtocol(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetJndiProtocol(*s)
	}
	return ruo
}

// SetJndiPath sets the "jndi_path" field.
func (ruo *RecordUpdateOne) SetJndiPath(s string) *RecordUpdateOne {
	ruo.mutation.SetJndiPath(s)
	return ruo
}

// SetNillableJndiPath sets the "jndi_path" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableJndiPath(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetJndiPath(*s)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RecordUpdateOne) SetCreatedAt(t time.Time) *RecordUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableCreatedAt(t *time.Time) *RecordUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RecordUpdateOne) SetUpdatedAt(t time.Time) *RecordUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// Mutation returns the RecordMutation object of the builder.
func (ruo *RecordUpdateOne) Mutation() *RecordMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecordUpdateOne) Select(field string, fields ...string) *RecordUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Record entity.
func (ruo *RecordUpdateOne) Save(ctx context.Context) (*Record, error) {
	var (
		err  error
		node *Record
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Record)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecordUpdateOne) SaveX(ctx context.Context) *Record {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecordUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecordUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := record.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *RecordUpdateOne) sqlSave(ctx context.Context) (_node *Record, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   record.Table,
			Columns: record.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: record.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Record.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, record.FieldID)
		for _, f := range fields {
			if !record.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != record.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UID(); ok {
		_spec.SetField(record.FieldUID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedUID(); ok {
		_spec.AddField(record.FieldUID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(record.FieldType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RemoteAddr(); ok {
		_spec.SetField(record.FieldRemoteAddr, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DNSName(); ok {
		_spec.SetField(record.FieldDNSName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.HTTPURL(); ok {
		_spec.SetField(record.FieldHTTPURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.HTTPMethod(); ok {
		_spec.SetField(record.FieldHTTPMethod, field.TypeString, value)
	}
	if value, ok := ruo.mutation.HTTPRaw(); ok {
		_spec.SetField(record.FieldHTTPRaw, field.TypeString, value)
	}
	if value, ok := ruo.mutation.JndiProtocol(); ok {
		_spec.SetField(record.FieldJndiProtocol, field.TypeString, value)
	}
	if value, ok := ruo.mutation.JndiPath(); ok {
		_spec.SetField(record.FieldJndiPath, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(record.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(record.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Record{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
