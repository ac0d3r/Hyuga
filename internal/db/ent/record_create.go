// Code generated by ent, DO NOT EDIT.

package ent

import (
	"hyuga/internal/db/ent/record"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecordCreate is the builder for creating a Record entity.
type RecordCreate struct {
	config
	mutation *RecordMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (rc *RecordCreate) SetUID(i int) *RecordCreate {
	rc.mutation.SetUID(i)
	return rc
}

// SetType sets the "type" field.
func (rc *RecordCreate) SetType(s string) *RecordCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetRemoteAddr sets the "remote_addr" field.
func (rc *RecordCreate) SetRemoteAddr(s string) *RecordCreate {
	rc.mutation.SetRemoteAddr(s)
	return rc
}

// SetDNSName sets the "dns_name" field.
func (rc *RecordCreate) SetDNSName(s string) *RecordCreate {
	rc.mutation.SetDNSName(s)
	return rc
}

// SetNillableDNSName sets the "dns_name" field if the given value is not nil.
func (rc *RecordCreate) SetNillableDNSName(s *string) *RecordCreate {
	if s != nil {
		rc.SetDNSName(*s)
	}
	return rc
}

// SetHTTPURL sets the "http_url" field.
func (rc *RecordCreate) SetHTTPURL(s string) *RecordCreate {
	rc.mutation.SetHTTPURL(s)
	return rc
}

// SetNillableHTTPURL sets the "http_url" field if the given value is not nil.
func (rc *RecordCreate) SetNillableHTTPURL(s *string) *RecordCreate {
	if s != nil {
		rc.SetHTTPURL(*s)
	}
	return rc
}

// SetHTTPMethod sets the "http_method" field.
func (rc *RecordCreate) SetHTTPMethod(s string) *RecordCreate {
	rc.mutation.SetHTTPMethod(s)
	return rc
}

// SetNillableHTTPMethod sets the "http_method" field if the given value is not nil.
func (rc *RecordCreate) SetNillableHTTPMethod(s *string) *RecordCreate {
	if s != nil {
		rc.SetHTTPMethod(*s)
	}
	return rc
}

// SetHTTPRaw sets the "http_raw" field.
func (rc *RecordCreate) SetHTTPRaw(s string) *RecordCreate {
	rc.mutation.SetHTTPRaw(s)
	return rc
}

// SetNillableHTTPRaw sets the "http_raw" field if the given value is not nil.
func (rc *RecordCreate) SetNillableHTTPRaw(s *string) *RecordCreate {
	if s != nil {
		rc.SetHTTPRaw(*s)
	}
	return rc
}

// SetJndiProtocol sets the "jndi_protocol" field.
func (rc *RecordCreate) SetJndiProtocol(s string) *RecordCreate {
	rc.mutation.SetJndiProtocol(s)
	return rc
}

// SetNillableJndiProtocol sets the "jndi_protocol" field if the given value is not nil.
func (rc *RecordCreate) SetNillableJndiProtocol(s *string) *RecordCreate {
	if s != nil {
		rc.SetJndiProtocol(*s)
	}
	return rc
}

// SetJndiPath sets the "jndi_path" field.
func (rc *RecordCreate) SetJndiPath(s string) *RecordCreate {
	rc.mutation.SetJndiPath(s)
	return rc
}

// SetNillableJndiPath sets the "jndi_path" field if the given value is not nil.
func (rc *RecordCreate) SetNillableJndiPath(s *string) *RecordCreate {
	if s != nil {
		rc.SetJndiPath(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RecordCreate) SetCreatedAt(t time.Time) *RecordCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RecordCreate) SetNillableCreatedAt(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RecordCreate) SetUpdatedAt(t time.Time) *RecordCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RecordCreate) SetNillableUpdatedAt(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RecordCreate) SetID(i int) *RecordCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the RecordMutation object of the builder.
func (rc *RecordCreate) Mutation() *RecordMutation {
	return rc.mutation
}

// Save creates the Record in the database.
func (rc *RecordCreate) Save(ctx context.Context) (*Record, error) {
	var (
		err  error
		node *Record
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Record)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordCreate) SaveX(ctx context.Context) *Record {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecordCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecordCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecordCreate) defaults() {
	if _, ok := rc.mutation.DNSName(); !ok {
		v := record.DefaultDNSName
		rc.mutation.SetDNSName(v)
	}
	if _, ok := rc.mutation.HTTPURL(); !ok {
		v := record.DefaultHTTPURL
		rc.mutation.SetHTTPURL(v)
	}
	if _, ok := rc.mutation.HTTPMethod(); !ok {
		v := record.DefaultHTTPMethod
		rc.mutation.SetHTTPMethod(v)
	}
	if _, ok := rc.mutation.HTTPRaw(); !ok {
		v := record.DefaultHTTPRaw
		rc.mutation.SetHTTPRaw(v)
	}
	if _, ok := rc.mutation.JndiProtocol(); !ok {
		v := record.DefaultJndiProtocol
		rc.mutation.SetJndiProtocol(v)
	}
	if _, ok := rc.mutation.JndiPath(); !ok {
		v := record.DefaultJndiPath
		rc.mutation.SetJndiPath(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := record.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := record.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordCreate) check() error {
	if _, ok := rc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Record.uid"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Record.type"`)}
	}
	if _, ok := rc.mutation.RemoteAddr(); !ok {
		return &ValidationError{Name: "remote_addr", err: errors.New(`ent: missing required field "Record.remote_addr"`)}
	}
	if _, ok := rc.mutation.DNSName(); !ok {
		return &ValidationError{Name: "dns_name", err: errors.New(`ent: missing required field "Record.dns_name"`)}
	}
	if _, ok := rc.mutation.HTTPURL(); !ok {
		return &ValidationError{Name: "http_url", err: errors.New(`ent: missing required field "Record.http_url"`)}
	}
	if _, ok := rc.mutation.HTTPMethod(); !ok {
		return &ValidationError{Name: "http_method", err: errors.New(`ent: missing required field "Record.http_method"`)}
	}
	if _, ok := rc.mutation.HTTPRaw(); !ok {
		return &ValidationError{Name: "http_raw", err: errors.New(`ent: missing required field "Record.http_raw"`)}
	}
	if _, ok := rc.mutation.JndiProtocol(); !ok {
		return &ValidationError{Name: "jndi_protocol", err: errors.New(`ent: missing required field "Record.jndi_protocol"`)}
	}
	if _, ok := rc.mutation.JndiPath(); !ok {
		return &ValidationError{Name: "jndi_path", err: errors.New(`ent: missing required field "Record.jndi_path"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Record.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Record.updated_at"`)}
	}
	return nil
}

func (rc *RecordCreate) sqlSave(ctx context.Context) (*Record, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (rc *RecordCreate) createSpec() (*Record, *sqlgraph.CreateSpec) {
	var (
		_node = &Record{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: record.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: record.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.UID(); ok {
		_spec.SetField(record.FieldUID, field.TypeInt, value)
		_node.UID = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(record.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.RemoteAddr(); ok {
		_spec.SetField(record.FieldRemoteAddr, field.TypeString, value)
		_node.RemoteAddr = value
	}
	if value, ok := rc.mutation.DNSName(); ok {
		_spec.SetField(record.FieldDNSName, field.TypeString, value)
		_node.DNSName = value
	}
	if value, ok := rc.mutation.HTTPURL(); ok {
		_spec.SetField(record.FieldHTTPURL, field.TypeString, value)
		_node.HTTPURL = value
	}
	if value, ok := rc.mutation.HTTPMethod(); ok {
		_spec.SetField(record.FieldHTTPMethod, field.TypeString, value)
		_node.HTTPMethod = value
	}
	if value, ok := rc.mutation.HTTPRaw(); ok {
		_spec.SetField(record.FieldHTTPRaw, field.TypeString, value)
		_node.HTTPRaw = value
	}
	if value, ok := rc.mutation.JndiProtocol(); ok {
		_spec.SetField(record.FieldJndiProtocol, field.TypeString, value)
		_node.JndiProtocol = value
	}
	if value, ok := rc.mutation.JndiPath(); ok {
		_spec.SetField(record.FieldJndiPath, field.TypeString, value)
		_node.JndiPath = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(record.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(record.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// RecordCreateBulk is the builder for creating many Record entities in bulk.
type RecordCreateBulk struct {
	config
	builders []*RecordCreate
}

// Save creates the Record entities in the database.
func (rcb *RecordCreateBulk) Save(ctx context.Context) ([]*Record, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Record, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecordCreateBulk) SaveX(ctx context.Context) []*Record {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecordCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecordCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
