// Code generated by ent, DO NOT EDIT.

package ent

import (
	"hyuga/internal/db/ent/record"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Record is the model entity for the Record schema.
type Record struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID int `json:"uid,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// RemoteAddr holds the value of the "remote_addr" field.
	RemoteAddr string `json:"remote_addr,omitempty"`
	// DNSName holds the value of the "dns_name" field.
	DNSName string `json:"dns_name,omitempty"`
	// HTTPURL holds the value of the "http_url" field.
	HTTPURL string `json:"http_url,omitempty"`
	// HTTPMethod holds the value of the "http_method" field.
	HTTPMethod string `json:"http_method,omitempty"`
	// HTTPRaw holds the value of the "http_raw" field.
	HTTPRaw string `json:"http_raw,omitempty"`
	// JndiProtocol holds the value of the "jndi_protocol" field.
	JndiProtocol string `json:"jndi_protocol,omitempty"`
	// JndiPath holds the value of the "jndi_path" field.
	JndiPath string `json:"jndi_path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case record.FieldID, record.FieldUID:
			values[i] = new(sql.NullInt64)
		case record.FieldType, record.FieldRemoteAddr, record.FieldDNSName, record.FieldHTTPURL, record.FieldHTTPMethod, record.FieldHTTPRaw, record.FieldJndiProtocol, record.FieldJndiPath:
			values[i] = new(sql.NullString)
		case record.FieldCreatedAt, record.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Record", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case record.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				r.UID = int(value.Int64)
			}
		case record.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		case record.FieldRemoteAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remote_addr", values[i])
			} else if value.Valid {
				r.RemoteAddr = value.String
			}
		case record.FieldDNSName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_name", values[i])
			} else if value.Valid {
				r.DNSName = value.String
			}
		case record.FieldHTTPURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_url", values[i])
			} else if value.Valid {
				r.HTTPURL = value.String
			}
		case record.FieldHTTPMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_method", values[i])
			} else if value.Valid {
				r.HTTPMethod = value.String
			}
		case record.FieldHTTPRaw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_raw", values[i])
			} else if value.Valid {
				r.HTTPRaw = value.String
			}
		case record.FieldJndiProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jndi_protocol", values[i])
			} else if value.Valid {
				r.JndiProtocol = value.String
			}
		case record.FieldJndiPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jndi_path", values[i])
			} else if value.Valid {
				r.JndiPath = value.String
			}
		case record.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case record.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Record.
// Note that you need to call Record.Unwrap() before calling this method if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return (&RecordClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Record entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Record is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", r.UID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(r.Type)
	builder.WriteString(", ")
	builder.WriteString("remote_addr=")
	builder.WriteString(r.RemoteAddr)
	builder.WriteString(", ")
	builder.WriteString("dns_name=")
	builder.WriteString(r.DNSName)
	builder.WriteString(", ")
	builder.WriteString("http_url=")
	builder.WriteString(r.HTTPURL)
	builder.WriteString(", ")
	builder.WriteString("http_method=")
	builder.WriteString(r.HTTPMethod)
	builder.WriteString(", ")
	builder.WriteString("http_raw=")
	builder.WriteString(r.HTTPRaw)
	builder.WriteString(", ")
	builder.WriteString("jndi_protocol=")
	builder.WriteString(r.JndiProtocol)
	builder.WriteString(", ")
	builder.WriteString("jndi_path=")
	builder.WriteString(r.JndiPath)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record

func (r Records) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
